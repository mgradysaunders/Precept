/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#pragma once
#ifndef PRE_GRAPHICS_PROSPECT
#define PRE_GRAPHICS_PROSPECT

#include <pre/math>

namespace pre {

#if 0
namespace prospect {

constexpr double Chlorophyll(double lambda) noexcept {
    constexpr double coeffs[] =                   //
            {0.06052967,  1.47933729, 0.03200000, //
             0.01744366,  1.53432010, 0.04502177, //
             0.01078680,  1.60785006, 0.04626436, //
             0.01162663,  1.69391666, 0.08441861, //
             -0.01007381, 1.91992817, -0.0515298, //
             0.01874177,  2.08326054, 0.08139910, //
             0.04459906,  2.27464038, 0.09445159, //
             0.06137043,  2.46364229, 0.16483130};
    double f = 0.0;
    double x = 1.0 / lambda;
    for (int k = 0; k < 8; k++) {
        double a = coeffs[3 * k + 0];
        double b = coeffs[3 * k + 1];
        double c = coeffs[3 * k + 2];
        f += a / (1.0 + nthpow((x - b) / c, 2));
    }
    return f;
}

} // namespace prospect
#endif

} // namespace pre

#endif // #ifndef PRE_GRAPHICS_PROSPECT
