/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#pragma once
#ifndef PRE_GRAPHICS_QUADRIC
#define PRE_GRAPHICS_QUADRIC

#include <pre-graphics/Ray>

namespace pre {

template <std::floating_point Float, size_t Dim>
struct Quadric {
    static_assert(Dim == 2 or Dim == 3);

  public:
    using Point = Array<Float, Dim>;
    using Vec = Array<Float, Dim>;
    using Mat = Array<Float, Dim, Dim>;

  public:
    constexpr Quadric() noexcept = default;

    constexpr Float field(Point x) const noexcept {
        return dot(x, coeffq, x) + dot(coeffr, x) + coeffs;
    }

    constexpr Vec field_gradient(Point x) const noexcept {
        return dot(x, coeffq + transpose(coeffq)) + coeffr;
    }

  public:
    constexpr void set_ellipsoid(Vec r) noexcept {
        coeffq = Mat(), coeffq->diag() = **(1 / (r * r));
        coeffr = Vec();
        coeffs = -1;
    }

    constexpr void set_cylinder(Array<Float, 2> r) noexcept
        requires(Dim == 3) {
        coeffq = Mat();
        coeffq(0, 0) = 1 / (r[0] * r[0]);
        coeffq(1, 1) = 1 / (r[1] * r[1]);
        coeffq(2, 2) = 0;
        coeffr = Vec();
        coeffs = -1;
    }

    constexpr void set_cone(Vec r) noexcept requires(Dim == 3) {
        coeffq = Mat(), coeffq->diag() = **(1 / (r * r));
        coeffr = Vec();
        coeffs = 0;
        coeffq(2, 2) *= -1;
    }

  public:
    Mat coeffq = Mat::identity();
    Vec coeffr = Vec();
    Float coeffs = -1;
};

template <std::floating_point Float = float>
using Quadric2 = Quadric<Float, 2>;

template <std::floating_point Float = float>
using Quadric3 = Quadric<Float, 3>;

template <std::floating_point Float, size_t Dim>
struct RayTest<Quadric<Float, Dim>> {
  public:
    using RayType = Ray<Float, Dim>;
    using HitType = Hit<Float, Dim>;

    constexpr RayTest(const RayType& r) noexcept : ray(&r) {
    }

    bool operator()(const Quadric<Float, Dim>& quadric, HitType* hit = nullptr)
        const noexcept {
        using BigFloat = std::common_type_t<Float, double>;
        Array<BigFloat, Dim, Dim> q = quadric.coeffq;
        Array<BigFloat, Dim> r = quadric.coeffr;
        Array<BigFloat, Dim> o = ray->org;
        Array<BigFloat, Dim> d = ray->dir;
        BigFloat a = dot(d, q, d);
        BigFloat b = dot(d, q, o) * 2 + dot(r, d);
        BigFloat c = dot(o, q, o) + dot(r, o) + quadric.coeffs;
        BigFloat t0 = NaN<BigFloat>;
        BigFloat t1 = NaN<BigFloat>;
        BigFloat t;
        if (not quadratic(a, b, c, t0, t1))
            return false;
        t = t0;
        if (not ray->is_in_range(t)) {
            t = t1;
            if (not ray->is_in_range(t))
                return false;
        }
        if (hit) {
            ray->tmax = t;
            hit->point = o + t * d;
            hit->normal = normalize(quadric.field_gradient(hit->point));
            hit->u = 0;
            hit->v = 0;
        }
        return true;
    }

  public:
    const RayType* ray = nullptr;
};

/// Convert to and from cylindrical coordinates.
///
/// - \f$ \mathbf{x} = (x, y, z) \f$
/// - \f$ \mathbf{q} = (\rho, \phi, z) \f$
///
namespace CylCoords {

template <std::floating_point Float>
inline Array<Float, 3> decode(const Array<Float, 3>& q) noexcept {
    return {
        q[0] * std::cos(q[1]), //
        q[0] * std::sin(q[1]), //
        q[2]};
}

template <std::floating_point Float>
inline Array<Float, 3> encode(const Array<Float, 3>& x) noexcept {
    return {std::hypot(x[0], x[1]), std::atan2(x[1], x[0]), x[2]};
}

template <std::floating_point Float>
inline Array<Float, 3, 3> decode_jacobian(const Array<Float, 3>& q) noexcept {
    auto [s1, c1] = sincos(q[1]);
    return {
        {c1, q[0] * -s1, 0}, //
        {s1, q[0] * +c1, 0}, //
        {0, 0, 1}};
}

template <std::floating_point Float>
inline Array<Float, 3, 3> encode_jacobian(const Array<Float, 3>& x) noexcept {
    Float r1 = std::hypot(x[0], x[1]);
    Float r2 = r1 * r1;
    return {
        {+x[0] / r1, +x[1] / r1, 0}, //
        {-x[1] / r2, +x[0] / r2, 0}, //
        {0, 0, 1}};
}

} // namespace CylCoords

/// Convert to and from spherical coordinates.
///
/// - \f$ \mathbf{x} = (x, y, z) \f$
/// - \f$ \mathbf{q} = (r, \theta, \phi) \f$
///
namespace SphCoords {

template <std::floating_point Float>
inline Array<Float, 3> decode(const Array<Float, 3>& q) noexcept {
    auto [s1, c1] = sincos(q[1]);
    auto [s2, c2] = sincos(q[2]);
    return {
        q[0] * s1 * c2, //
        q[0] * s1 * s2, //
        q[0] * c1};
}

template <std::floating_point Float>
inline Array<Float, 3> encode(const Array<Float, 3>& x) noexcept {
    Float r = std::hypot(x[0], x[1]);
    return {
        std::hypot(r, x[2]), //
        std::atan2(r, x[2]), //
        std::atan2(x[1], x[0])};
}

template <std::floating_point Float>
inline Array<Float, 3, 3> decode_jacobian(const Array<Float, 3>& q) noexcept {
    auto [s1, c1] = sincos(q[1]);
    auto [s2, c2] = sincos(q[2]);
    return {
        {s1 * c2, +q[0] * c1 * c2, -q[0] * s1 * s2},
        {s1 * s2, +q[0] * c1 * s2, +q[0] * s1 * c2},
        {c1, -q[0] * s1, 0}};
}

template <std::floating_point Float>
inline Array<Float, 3, 3> encode_jacobian(const Array<Float, 3>& x) noexcept {
    if constexpr (std::same_as<Float, float>)
        return encode_jacobian<double>(x);
    else
        return inverse(decode_jacobian(encode(x)));
}

} // namespace SphCoords

} // namespace pre

#endif // #ifndef PRE_GRAPHICS_QUADRIC
