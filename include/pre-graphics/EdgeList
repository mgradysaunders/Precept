/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#pragma once
#ifndef PRE_GRAPHICS_EDGE_LIST
#define PRE_GRAPHICS_EDGE_LIST

#include <map>
#include <pre/meta>

namespace pre {

template <
    typename Node,
    typename Edge,
    typename EdgeAlloc = std::allocator<Edge>,
    bool IsDirected = false>
class EdgeList {
  public:
    struct EdgeKey {
        Node node0 = {};
        Node node1 = {};

        constexpr auto operator<=>(const EdgeKey& other) const noexcept {
            return as_pair() <=> other.as_pair();
        }
        constexpr bool operator==(const EdgeKey& other) const noexcept {
            return as_pair() == other.as_pair();
        }
        constexpr bool operator!=(const EdgeKey& other) const noexcept {
            return as_pair() == other.as_pair();
        }

        constexpr std::pair<Node, Node> as_pair() const noexcept {
            if constexpr (IsDirected)
                return {node0, node1};
            else
                return std::minmax(node0, node1);
        }
    };

    using EdgeContainer = std::map<
        EdgeKey,
        Edge,
        std::less<EdgeKey>,
        typename std::allocator_traits<EdgeAlloc>:: //
        template rebind_alloc<std::pair<const EdgeKey, Edge>>>;

    typedef EdgeKey key_type;

    typedef Edge mapped_type;

    typedef size_t size_type;

    typedef ptrdiff_t difference_type;

    typedef std::pair<const key_type, mapped_type> value_type;

    typedef value_type& reference;

    typedef value_type* pointer;

    typedef const value_type& const_reference;

    typedef const value_type* const_pointer;

    typedef typename EdgeContainer::iterator iterator;

    typedef typename EdgeContainer::const_iterator const_iterator;

  public:
    EdgeList() noexcept = default;

    EdgeList(const EdgeList&) = default;

    EdgeList(EdgeList&&) = default;

    EdgeList& operator=(const EdgeList&) = default;

    EdgeList& operator=(EdgeList&&) = default;

  public:
    [[nodiscard]] bool empty() const noexcept {
        return edges_.empty();
    }

    size_type size() const noexcept {
        return edges_.size();
    }

    size_type max_size() const noexcept {
        return edges_.max_size();
    }

    void clear() noexcept {
        edges_.clear();
    }

    void reserve(size_t count) {
        edges_.reserve(count);
    }

    iterator begin() noexcept {
        return edges_.begin();
    }

    const_iterator begin() const noexcept {
        return edges_.begin();
    }

    const_iterator cbegin() const noexcept {
        return begin(); // Force const
    }

    iterator end() noexcept {
        return edges_.end();
    }

    const_iterator end() const noexcept {
        return edges_.end();
    }

    const_iterator cend() const noexcept {
        return end(); // Force const
    }

    Edge& operator[](const EdgeKey& key) {
        return edges_[key];
    }

    Edge& operator()(const Node& node0, const Node& node1) {
        return operator[](EdgeKey{node0, node1});
    }

    Edge& at(const EdgeKey& key) {
        return edges_.at(key);
    }

    Edge& at(const Node& node0, const Node& node1) {
        return edges_.at(EdgeKey{node0, node0});
    }

    const Edge& at(const EdgeKey& key) const {
        return edges_.at(key);
    }

    const Edge& at(const Node& node0, const Node& node1) const {
        return edges_.at(EdgeKey{node0, node1});
    }

    iterator find(const EdgeKey& key) {
        return edges_.find(key);
    }

    const_iterator find(const EdgeKey& key) const {
        return edges_.find(key);
    }

    bool contains(const EdgeKey& key) const {
        return edges_.contains(key);
    }

    bool contains(const Node& node0, const Node& node1) const {
        return edges_.contains(EdgeKey{node0, node1});
    }

    std::pair<iterator, bool> insert(const value_type& value) {
        return edges_.insert(value);
    }

    iterator erase(const_iterator pos) {
        return edges_.erase(pos);
    }

    iterator erase(const_iterator pos0, const_iterator pos1) {
        return edges_.erase(pos0, pos1);
    }

    void swap(EdgeList& other) {
        edges_.swap(other.edges_);
    }

  private:
    EdgeContainer edges_;
};

template <
    typename Node,
    typename Edge,
    typename EdgeAlloc = std::allocator<Edge>>
using DirectedEdgeList = EdgeList<Node, Edge, EdgeAlloc, true>;

} // namespace pre

#endif // #ifndef PRE_GRAPHICS_EDGE_LIST
