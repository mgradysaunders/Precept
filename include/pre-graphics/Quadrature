/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#pragma once
#ifndef PRE_GRAPHICS_QUADRATURE
#define PRE_GRAPHICS_QUADRATURE

#include <pre/math>

namespace pre {

/// A Gauss-Legendre quadrature angle/weight pair.
///
/// \param[in] n  The number of nodes.
/// \param[in] k  The node index in `[1,n]`.
///
/// \note
/// This is an adaptation of Ignace Bogaert's implementation of 
/// his _FastGL_ algorithm, described in "Iteration-Free Computation 
/// of Gauss-Legendre Quadrature Nodes and Weights" published in 
/// the SIAM Journal of Scientific Computing. 
///
std::pair<double, double> gaussleg(int n, int k) noexcept;

/// A quadrature rule with N points.
template <size_t N>
struct Quadrature {
  public:
    double x[N / 2 + (N & 1)] = {};
    double w[N / 2 + (N & 1)] = {};

    Quadrature() noexcept {
        for (int k = 0; k < int(N / 2 + (N & 1)); k++) {
            auto [theta, omega] = gaussleg(N, k + 1);
            x[k] = 0.5 - 0.5 * std::cos(theta);
            w[k] = omega;
        }
    }

    template <std::invocable<double> Func>
    double operator()(double a, double b, Func&& func) const {
        double f = 0;
        for (int k = 0; k < int(N / 2); k++) {
            double t0 = lerp(x[k], a, b);
            double t1 = lerp(x[k], b, a);
            double f0 = std::invoke(std::forward<Func>(func), t0);
            double f1 = std::invoke(std::forward<Func>(func), t1);
            f += w[k] * (f0 + f1);
        }
        if constexpr (N & 1) {
            int k = N / 2;
            double tm = lerp(x[k], a, b);
            double fm = std::invoke(std::forward<Func>(func), tm);
            f += w[k] * fm;
        }
        return f * (b - a) / 2;
    }
};

} // namespace pre

#endif // #ifndef PRE_GRAPHICS_QUADRATURE
