/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#pragma once
#ifndef PRE_GRAPHICS_IMMUTABLE_KD_TREE
#define PRE_GRAPHICS_IMMUTABLE_KD_TREE

#include <pre-graphics/Bound>
#include <pre-graphics/GrowableStack>

namespace pre {

template <size_t Dim>
class ImmutableKdTree {
    static_assert(Dim == 2 or Dim == 3);

  public:
    using Box = Bound<float, Dim>;

    using Point = Array<float, Dim>;

    struct Node {
        Point point;
        std::uint32_t index = 0;
        std::uint32_t right = 0;
        std::uint8_t left = 0;
        std::uint8_t axis = 0;

        void serialize(auto& serializer) {
            serializer <=> point;
            serializer <=> index;
            serializer <=> right;
            serializer <=> left;
            serializer <=> axis;
        }
    };

    struct Item {
        std::uint32_t index;
        Point point;
    };

    using Nodes = std::vector<Node>;
    using Items = std::vector<Item>;

  public:
    void build(Items& items);

    template <std::forward_iterator Iterator, std::invocable<Iterator> Cast>
    void build(Iterator from, Iterator to, Cast&& cast) {
        Items items;
        items.reserve(std::distance(from, to));
        for (Iterator curr = from; curr != to; ++curr) {
            Item& item = items.emplace_back();
            item.index = items.size() - 1;
            item.point = std::invoke(std::forward<Cast>(cast), curr);
        }
        build(items);
    }

    void clear() {
        nodes.clear();
    }

  public:
    Nodes nodes;

    void serialize(auto& serializer) {
        serializer <=> nodes;
    }
};

using ImmutableKdTree2 = ImmutableKdTree<2>;

using ImmutableKdTree3 = ImmutableKdTree<3>;

} // namespace pre

#endif // #ifndef PRE_GRAPHICS_IMMUTABLE_KD_TREE
