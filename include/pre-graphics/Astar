/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#pragma once
#ifndef PRE_GRAPHICS_ASTAR
#define PRE_GRAPHICS_ASTAR

#include <map>
#include <pre/math>
#include <pre/memory>
#include <pre-graphics/GrowableHeap>

namespace pre {

template <typename Node>
struct Astar {
  public:
    template <typename K, typename V>
    using Map = std::
        map<K, V, std::less<K>, HeapArenaAllocator<std::pair<const K, V>>>;

    static constexpr bool PrevIsUserData() noexcept {
        struct TmpInfo {
            int depth = 0;
            float fscore = Inf<float>;
            float gscore = Inf<float>;
            UserData prev = {};
        };
        using TmpNodeInfo = Map<Node, TmpInfo>;
        using TmpNodeInfoIterator = typename TmpNodeInfo::iterator;
        return sizeof(UserData) >= sizeof(TmpNodeInfoIterator) and
               concepts::trivial<TmpNodeInfoIterator>;
    }

    using Prev = std::conditional_t<PrevIsUserData(), UserData, Node>;
    struct Info {
        int depth = 0;
        float fscore = Inf<float>;
        float gscore = Inf<float>;
        Prev prev = {};
    };
    using NodeInfo = Map<Node, Info>;
    using NodeInfoIterator = typename NodeInfo::iterator;
    using Path = std::vector<Node>;

    /// A skeleton algorithm for A* path finding.
    ///
    /// \param[out] path      The output path nodes.
    /// \param[in] source     The source node to start from.
    /// \param[in] target     The target node to seek.
    /// \param[in] cost       The traversal cost.
    /// \param[in] heuristic  The heuristic to estimate remaining cost.
    /// \param[in] neighbors  The routine to lookup neighbors.
    ///
    template <
        std::invocable<const Node&, const Node&> Cost,
        std::invocable<const Node&> Heuristic,
        std::invocable<const Node&> Neighbors>
    static void go(
        Path& path,
        const Node& source,
        const Node& target,
        Cost&& cost,
        Heuristic&& heuristic,
        Neighbors&& neighbors,
        float eps = 0,
        float max_depth = 0) {
        float inv_depth = 0;
        if (max_depth > 0)
            inv_depth = 1 / max_depth;

        GrowableHeap todo(
            capture_type<NodeInfoIterator>(), //
            capture_size<64>(),               //
            [](const NodeInfoIterator& lhs,   //
               const NodeInfoIterator& rhs) {
                return lhs->second.fscore > rhs->second.fscore;
            });
        NodeInfo info;
        Info source_info;
        source_info.depth = 0;
        source_info.fscore =
            std::invoke(std::forward<Heuristic>(heuristic), source);
        source_info.gscore = 0;
        if constexpr (std::same_as<Prev, UserData>)
            source_info.prev = info.end();
        todo.push(info.insert({source, source_info}).first);
        NodeInfoIterator node = {};
        bool success = false;
        path.clear();
        path.reserve(64);
        while (not todo.empty()) {
            node = todo.pop();
            if (node->first == target) {
                success = true;
                break;
            }
            for (const Node& neighbor : std::invoke(
                     std::forward<Neighbors>(neighbors), node->first)) {
                NodeInfoIterator next = info.insert({neighbor, {}}).first;
                float gscore =
                    node->second.gscore +
                    std::invoke(
                        std::forward<Cost>(cost), node->first, next->first);
                if (next->second.gscore > gscore) {
                    next->second.gscore = gscore;
                    next->second.depth = node->second.depth;
                    next->second.depth++;
                    float hscore = std::invoke(
                        std::forward<Heuristic>(heuristic), next->first);
                    float wscore = 1 - next->second.depth * inv_depth;
                    if (wscore < 0)
                        wscore = 0;
                    wscore = 1 + eps * wscore;
                    next->second.fscore = gscore + wscore * hscore;
                    if constexpr (std::same_as<Prev, UserData>)
                        next->second.prev = node;
                    else
                        next->second.prev = node->first;
                    if (std::find(todo.begin(), todo.end(), next) ==
                        todo.end())
                        todo.push(next);
                }
            }
        }
        if (success) {
            while (node != info.end()) {
                path.emplace_back(node->first);
                if constexpr (std::same_as<Prev, UserData>)
                    node = node->second.prev.template as<NodeInfoIterator>();
                else {
                    if (node->second.depth > 0)
                        node = info.find(node->second.prev);
                    else
                        break;
                }
            }
            std::reverse(path.begin(), path.end());
        }
    }
};

} // namespace pre

#endif // #ifndef PRE_GRAPHICS_ASTAR
