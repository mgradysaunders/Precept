/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#pragma once
#ifndef PRE_GRAPHICS_GROWABLE_HEAP
#define PRE_GRAPHICS_GROWABLE_HEAP

#include <pre-graphics/GrowableStack>

namespace pre {

template <
    typename Value,
    size_t Size = 64,
    typename Predicate = std::less<Value>>
struct GrowableHeap : GrowableStack<Value, Size> {
  public:
    using Super = GrowableStack<Value, Size>;

    constexpr GrowableHeap() noexcept = default;

    constexpr GrowableHeap(Predicate&& predicate) noexcept
        : predicate_(predicate) {
    }

    /// Allow for CTAD with lambdas
    constexpr GrowableHeap(
        capture_type<Value>,
        capture_size<Size>,
        Predicate&& predicate) noexcept
        : predicate_(predicate) {
    }

    GrowableHeap(const GrowableHeap&) = delete;

    GrowableHeap(GrowableHeap&&) = delete;

  public:
    /// \name Heap API
    /** \{ */

    constexpr void push(const Value& value) {
        Super::push(value);
        std::push_heap(
            this->begin(), //
            this->end(), predicate_);
    }

    constexpr Value pop() {
        std::pop_heap(
            this->begin(), //
            this->end(), predicate_);
        return Super::pop();
    }

    /** \} */

  private:
    Predicate predicate_;
};

template <typename Value, size_t Size = 64>
using GrowableMinHeap = GrowableHeap<Value, Size, std::greater<Value>>;

template <typename Value, size_t Size = 64>
using GrowableMaxHeap = GrowableHeap<Value, Size, std::less<Value>>;

} // namespace pre

#endif // #ifndef PRE_GRAPHICS_GROWABLE_HEAP
