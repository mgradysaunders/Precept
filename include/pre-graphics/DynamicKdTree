/*-*- C++ -*-*/
/* Copyright (c) 2018-21 M. Grady Saunders
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-*-*-*-*-*-*/
#pragma once
#ifndef PRE_GRAPHICS_DYNAMIC_KD_TREE
#define PRE_GRAPHICS_DYNAMIC_KD_TREE

#include <pre/memory>
#include <pre-graphics/Bound>
#include <pre-graphics/GrowableStack>
#include <pre-graphics/UserData>

namespace pre {

template <size_t Dim>
class DynamicKdTree {
    static_assert(Dim == 2 or Dim == 3);

  public:
    using Point = Array<float, Dim>;

    using Box = Bound<float, Dim>;

    using Int = std::int32_t;

    static constexpr Int Nil = -1;

    struct Node {
        Point point;
        union {
            Int parent;
            Int next;
        };
        Int child0 = Nil;
        Int child1 = Nil;
        Int height : 16 = -1;
        Int axis : 8 = -1;
        Int dead : 8 = 0;
        UserData userdata = {};

        constexpr bool is_leaf() const noexcept {
            return child0 == Nil and child1 == Nil;
        }
        constexpr bool is_branch() const noexcept {
            return child0 != Nil or child1 != Nil;
        }
        constexpr auto threshold() const noexcept {
            return point[axis];
        }
        constexpr auto operator<=>(const Point& p) const noexcept {
            return point[axis] <=> p[axis];
        }
    };

    using Nodes = std::vector<Node>;

  public:
    DynamicKdTree() = default;

    DynamicKdTree(const DynamicKdTree&) = default;

    DynamicKdTree(DynamicKdTree&&) = default;

    DynamicKdTree& operator=(const DynamicKdTree&) = default;

    DynamicKdTree& operator=(DynamicKdTree&&) = default;

  public:
    void clear() noexcept {
        nodes_.clear();
        free_ = Nil;
        root_ = Nil;
        node_count_ = 0;
        dead_count_ = 0;
        rebalance_count_ = 0;
        box_ = {};
    }

    bool empty() const noexcept {
        return root_ == Nil;
    }

    Node& operator[](Int node) noexcept {
        return nodes_[node];
    }

    const Node& operator[](Int node) const noexcept {
        return nodes_[node];
    }

    Int max_height() const noexcept {
        return root_ == Nil ? 0 : nodes_[root_].height;
    }

    Int max_imbalance() const noexcept {
        Int imbalance = 0;
        for (const Node& node_ref : nodes_) {
            if (node_ref.height < 2 or //
                node_ref.child0 == Nil or node_ref.child1 == Nil)
                continue;
            Int height0 = nodes_[node_ref.child0].height;
            Int height1 = nodes_[node_ref.child1].height;
            maximize(imbalance, std::abs(height1 - height0));
        }
        return imbalance;
    }

    Int node_count() const noexcept {
        return node_count_;
    }

    Int dead_count() const noexcept {
        return dead_count_;
    }

    Int rebalance_count() const noexcept {
        return rebalance_count_;
    }

    Int insert(const Point& point, UserData userdata = {}) {
        Int node = private_allocate();
        Node& node_ref = nodes_[node];
        node_ref.point = point;
        node_ref.height = 0;
        node_ref.userdata = userdata;
        private_insert(node);
        return node;
    }

    void remove(Int node) {
        if (private_remove(node))
            private_deallocate(node);
    }

    void rebalance() {
        private_rebalance();
    }

    // TODO void update(Int node, const Point& point);

  public:
    Box region(Int node) const;

    /// Visit all nodes in box.
    template <std::invocable<Int> Visitor>
    void visit(const Box& box, Visitor&& visitor) {
        GrowableStack<Int> todo;
        if (root_ != Nil)
            todo.push(root_);
        while (not todo.empty()) {
            Int node = todo.pop();
            Node& node_ref = nodes_[node];
            if (not node_ref.dead and
                not std::invoke(std::forward<Visitor>(visitor), node))
                return;
            Int axis = node_ref.axis;
            Int child0 = node_ref.child0;
            Int child1 = node_ref.child1;
            if (child0 != Nil and node_ref.point[axis] > box.min(axis))
                todo.push(child0);
            if (child1 != Nil and node_ref.point[axis] < box.max(axis))
                todo.push(child1);
        }
    }

    /// Visit all nodes in sphere.
    template <std::invocable<Int> Visitor>
    void visit(const Point& center, float radius, Visitor&& visitor) {
        float radius2 = radius * radius;
        Point min_point = center - Point(std::abs(radius));
        Point max_point = center + Point(std::abs(radius));
        visit(Box(min_point, max_point), [&](Int node) {
            if (distance2(nodes_[node].point, center) < radius2 and
                not std::invoke(std::forward<Visitor>(visitor), node))
                return false;
            return true;
        });
    }

    struct Nearest {
        /// Node.
        Int node = Nil;
        /// Distance squared.
        float dist2 = Inf<float>;
        /// Comparison operator.
        constexpr auto operator<=>(const Nearest& other) const noexcept {
            return dist2 <=> other.dist2;
        }
    };

    Nearest nearest(Point point) const;

    void nearest(Point point, IteratorRange<Nearest*> near) const;

  private:
    Nodes nodes_;

    Int free_ = Nil;

    Int root_ = Nil;

    Int node_count_ = 0;

    Int dead_count_ = 0;

    Int rebalance_count_ = 0;

    Box box_;

  private:
    Int private_allocate();

    void private_deallocate(Int node) {
        node_count_--;
        nodes_[node].next = free_;
        nodes_[node].height = -1;
        free_ = node;
    }

    Int private_select_axis(Int node);

    void private_insert(Int node);

    bool private_remove(Int node);

    void private_rebalance();

    Int private_rebalance(IteratorRange<Int*> nodes);
};

using DynamicKdTree2 = DynamicKdTree<2>;

using DynamicKdTree3 = DynamicKdTree<3>;

} // namespace pre

#endif // #ifndef PRE_GRAPHICS_DYNAMIC_KD_TREE
