#include <pre-graphics/Quadrature>

#include "QuadratureTabulated.h"

static std::pair<double, double> gaussleg_lookup(int l, int k) noexcept {
    double theta = 0;
    double omega = 0;
    int m = l / 2;
    int i = m - 1;
    int j = m - 1 - k;
    if (j < 0)
        j = k - 1 - m;
    if (l & 1) {
        if (k == m)
            return {M_PI_2, 2 / (prod_coeff[l] * prod_coeff[l])};
        theta = odd_theta[i][j];
        omega = odd_omega[i][j];
    }
    else {
        theta = even_theta[i][j];
        omega = even_omega[i][j];
    }
    if (k >= m)
        theta = M_PI - theta;
    return {theta, omega};
}

// BesselJ(0,k)
static double besselj0(int k) noexcept {
    if (k > 20) {
        double z = M_PI * (k - 0.25);
        double zm1 = 1 / z;
        double zm2 = zm1 * zm1;
        double x = 5.09225462402226769498681286758e7;
        x = std::fma(zm2, x, -8.49353580299148769921876983660e5);
        x = std::fma(zm2, x, +1.86904765282320653831636345064e4);
        x = std::fma(zm2, x, -5.67644412135183381139802038240e2);
        x = std::fma(zm2, x, +2.53364147973439050099206349206e1);
        x = std::fma(zm2, x, -1.82443876720610119047619047619e0);
        x = std::fma(zm2, x, +2.46028645833333333333333333333e-1);
        x = std::fma(zm2, x, -8.07291666666666666666666666667e-2);
        x = std::fma(zm2, x, +0.125);
        x = std::fma(zm1, x, z);
        return x;
    }
    static constexpr double lookup[20] = {
            2.40482555769577276862163187933, 5.52007811028631064959660411281,
            8.65372791291101221695419871266, 11.7915344390142816137430449119,
            14.9309177084877859477625939974, 18.0710639679109225431478829756,
            21.2116366298792589590783933505, 24.3524715307493027370579447632,
            27.4934791320402547958772882346, 30.6346064684319751175495789269,
            33.7758202135735686842385463467, 36.9170983536640439797694930633,
            40.0584257646282392947993073740, 43.1997917131767303575240727287,
            46.3411883716618140186857888791, 49.4826098973978171736027615332,
            52.6240518411149960292512853804, 55.7655107550199793116834927735,
            58.9069839260809421328344066346, 62.0484691902271698828525002646};
    return lookup[k - 1];
}

// BesselJ(1, BesselJ(0,k))
static double besselj1_square(int k) noexcept {
    if (k > 21) {
        double z = 1.0 / (k - 0.25);
        double z2 = z * z;
        double z4 = z2 * z2;
        double x = 0.185395398206345628711318848386;
        x = std::fma(z2, x, -0.266837393702323757700998557826e-1);
        x = std::fma(z2, x, +0.496101423268883102872271417616e-2);
        x = std::fma(z2, x, -0.123632349727175414724737657367e-2);
        x = std::fma(z2, x, +0.433710719130746277915572905025e-3);
        x = std::fma(z2, x, -0.228969902772111653038747229723e-3);
        x = std::fma(z2, x, +0.198924364245969295201137972743e-3);
        x = std::fma(z2, x, -0.303380429711290253026202643516e-3);
        x = std::fma(z4, x, +0.202642367284675542887758926420);
        return z * x;
    }
    static constexpr double lookup[21] = {0.2695141239419169261390219929110,
                                          0.1157801385822036958078128361820,
                                          0.0736863511364082151406476811985,
                                          0.0540375731981162820417749182758,
                                          0.0426614290172430912655106063495,
                                          0.0352421034909961013587473033648,
                                          0.0300210701030546726750888157688,
                                          0.0261473914953080885904584675399,
                                          0.0231591218246913922652676382178,
                                          0.0207838291222678576039808057297,
                                          0.0188504506693176678161056800214,
                                          0.0172461575696650082995240053542,
                                          0.0158935181059235978027065594287,
                                          0.0147376260964721895895742982592,
                                          0.0137384651453871179182880484134,
                                          0.0128661817376151328791406637228,
                                          0.0120980515486267975471075438497,
                                          0.0114164712244916085168627222986,
                                          0.0108075927911802040115547286830,
                                          0.0102603729262807628110423992790,
                                          0.0097658971397910505405984673669};
    return lookup[k - 1];
}

static std::pair<double, double> gaussleg_asymptotic(int n, int k) noexcept {
    double nu = besselj0(k);
    double w = 1.0 / (n + 0.5);
    double x = w * nu, x2 = x * x;

    // Chebyshev interpolants for the abscissas
    double xf1 = -1.29052996274280508473467968379e-12;
    xf1 = std::fma(x2, xf1, +2.40724685864330121825976175184e-10);
    xf1 = std::fma(x2, xf1, -3.13148654635992041468855740012e-8);
    xf1 = std::fma(x2, xf1, +0.275573168962061235623801563453e-5);
    xf1 = std::fma(x2, xf1, -0.148809523713909147898955880165e-3);
    xf1 = std::fma(x2, xf1, +0.416666666665193394525296923981e-2);
    xf1 = std::fma(x2, xf1, -0.416666666666662959639712457549e-1);

    double xf2 = +2.20639421781871003734786884322e-9;
    xf2 = std::fma(x2, xf2, -7.53036771373769326811030753538e-8);
    xf2 = std::fma(x2, xf2, +0.161969259453836261731700382098e-5);
    xf2 = std::fma(x2, xf2, -0.253300326008232025914059965302e-4);
    xf2 = std::fma(x2, xf2, +0.282116886057560434805998583817e-3);
    xf2 = std::fma(x2, xf2, -0.209022248387852902722635654229e-2);
    xf2 = std::fma(x2, xf2, +0.815972221772932265640401128517e-2);

    double xf3 = 2.97058225375526229899781956673e-8;
    xf3 = std::fma(x2, xf3, +5.55845330223796209655886325712e-7);
    xf3 = std::fma(x2, xf3, -0.567797841356833081642185432056e-5);
    xf3 = std::fma(x2, xf3, +0.418498100329504574443885193835e-4);
    xf3 = std::fma(x2, xf3, -0.251395293283965914823026348764e-3);
    xf3 = std::fma(x2, xf3, +0.128654198542845137196151147483e-2);
    xf3 = std::fma(x2, xf3, -0.416012165620204364833694266818e-2);

    // Chebyshev interpolants for the weights
    double wf1 = -2.20902861044616638398573427475e-14;
    wf1 = std::fma(x2, wf1, +2.30365726860377376873232578871e-12);
    wf1 = std::fma(x2, wf1, -1.75257700735423807659851042318e-10);
    wf1 = std::fma(x2, wf1, +1.03756066927916795821098009353e-8);
    wf1 = std::fma(x2, wf1, -4.63968647553221331251529631098e-7);
    wf1 = std::fma(x2, wf1, +0.149644593625028648361395938176e-4);
    wf1 = std::fma(x2, wf1, -0.326278659594412170300449074873e-3);
    wf1 = std::fma(x2, wf1, +0.436507936507598105249726413120e-2);
    wf1 = std::fma(x2, wf1, -0.305555555555553028279487898503e-1);
    wf1 = std::fma(x2, wf1, +0.833333333333333302184063103900e-1);

    double wf2 = +3.63117412152654783455929483029e-12;
    wf2 = std::fma(x2, wf2, +7.67643545069893130779501844323e-11);
    wf2 = std::fma(x2, wf2, -7.12912857233642220650643150625e-9);
    wf2 = std::fma(x2, wf2, +2.11483880685947151466370130277e-7);
    wf2 = std::fma(x2, wf2, -0.381817918680045468483009307090e-5);
    wf2 = std::fma(x2, wf2, +0.465969530694968391417927388162e-4);
    wf2 = std::fma(x2, wf2, -0.407297185611335764191683161117e-3);
    wf2 = std::fma(x2, wf2, +0.268959435694729660779984493795e-2);
    wf2 = std::fma(x2, wf2, -0.111111111111214923138249347172e-1);

    double wf3 = 2.01826791256703301806643264922e-9;
    wf3 = std::fma(x2, wf3, -4.38647122520206649251063212545e-8);
    wf3 = std::fma(x2, wf3, +5.08898347288671653137451093208e-7);
    wf3 = std::fma(x2, wf3, -0.397933316519135275712977531366e-5);
    wf3 = std::fma(x2, wf3, +0.200559326396458326778521795392e-4);
    wf3 = std::fma(x2, wf3, -0.422888059282921161626339411388e-4);
    wf3 = std::fma(x2, wf3, -0.105646050254076140548678457002e-3);
    wf3 = std::fma(x2, wf3, -0.947969308958577323145923317955e-4);
    wf3 = std::fma(x2, wf3, +0.656966489926484797412985260842e-2);

    // Refine
    double p = nu / std::sin(x);
    double q = w * w * p;
    double r = q * q;
    double xf = q * (r * (r * xf3 + xf2) + xf1);
    double wf = p * (r * (r * (r * wf3 + wf2) + wf1) + 1);
    return {w * (xf * x + nu), 2 * w / (wf * besselj1_square(k))};
}

namespace pre {

std::pair<double, double> gaussleg(int n, int k) noexcept {
    ASSERT(k > 0);
    ASSERT(k <= n);
    if (2 * k - 1 > n) {
        auto [theta, omega] = gaussleg(n, n - k + 1);
        theta = M_PI - theta;
        return {theta, omega};
    }
    else {
        if (n < 101)
            return ::gaussleg_lookup(n, k - 1);
        else
            return ::gaussleg_asymptotic(n, k);
    }
}

} // namespace pre
